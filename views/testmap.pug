doctype html
html(lang="en")
    head
        meta(charset="UTF-8")
        meta(name="viewport", content="width=device-width, initial-scale=1.0")
        title Test Map #{title}
        link(rel="shortcut icon", href="/img/favicon.png", type="image/png")
        link(href="https://api.mapbox.com/mapbox-gl-js/v3.3.0/mapbox-gl.css" rel="stylesheet")
        script(src="https://api.mapbox.com/mapbox-gl-js/v3.3.0/mapbox-gl.js")
        style.
            body { margin: 0; padding: 0; }
            #map { position: absolute; top: 0; bottom: 0; width: 100%; }
    
    body
        h2 Map Testing
        #map()
        script.
            mapboxgl.accessToken = 'pk.eyJ1IjoidGhlaW56YXcwOTAyIiwiYSI6ImNsdzhwMnVxOTBhcGoyeHJ5ZDUyOXJhc2QifQ.hR3GZxnVQDB7vLaNzWp4Rw';
            const map = new mapboxgl.Map({
                container: 'map',
                style: 'mapbox://styles/mapbox/streets-v9',
                //- 'mapbox://styles/theinzaw0902/clwd8rk1g000p01qwbefj3tfn'
                projection: 'globe', // Display the map as a globe, since satellite-v9 defaults to Mercator
                zoom: 2,
                center: [-118.113491, 34.111745],
                //interactive: false,
            });

            map.addControl(new mapboxgl.NavigationControl());
            map.scrollZoom.disable();

            //- map.on('style.load', () => {
            //-     map.setFog({}); // Set the default atmosphere style
            //- });

            //- // The following values can be changed to control rotation speed:

            //- // At low zooms, complete a revolution every two minutes.
            const secondsPerRevolution = 240;
            //- // Above zoom level 5, do not rotate.
            const maxSpinZoom = 5;
            //- // Rotate at intermediate speeds between zoom levels 3 and 5.
            const slowSpinZoom = 3;

            let userInteracting = false;
            const spinEnabled = true;

            function spinGlobe() {
                const zoom = map.getZoom();
                if (spinEnabled && !userInteracting && zoom < maxSpinZoom) {
                    let distancePerSecond = 360 / secondsPerRevolution;
                    if (zoom > slowSpinZoom) {
                        // Slow spinning at higher zooms
                        const zoomDif =
                            (maxSpinZoom - zoom) / (maxSpinZoom - slowSpinZoom);
                        distancePerSecond *= zoomDif;
                    }
                    const center = map.getCenter();
                    center.lng -= distancePerSecond;
                    // Smoothly animate the map over one second.
                    // When this animation is complete, it calls a 'moveend' event.
                    map.easeTo({ center, duration: 1000, easing: (n) => n });
                }
            }

            // Pause spinning on interaction
            map.on('mousedown', () => {
                userInteracting = true;
            });
            map.on('dragstart', () => {
                userInteracting = true;
            });

            // When animation is complete, start spinning if there is no ongoing interaction
            map.on('moveend', () => {
                spinGlobe();
            });

            spinGlobe();